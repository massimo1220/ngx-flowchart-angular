{"version":3,"file":"ngx-flowchart.component.d.ts","sources":["ngx-flowchart.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { DoCheck, OnInit } from '@angular/core';\nimport { ChangeDetectorRef, ElementRef, EventEmitter, IterableDiffers, NgZone } from '@angular/core';\nimport { FcCallbacks, FcEdge, FcModel, UserCallbacks, UserNodeCallbacks } from './ngx-flowchart.models';\nimport { FcModelService } from './model.service';\nimport { FcModelValidationService } from './modelvalidation.service';\nimport { FcNodeDraggingService } from './node-dragging.service';\nimport { FcEdgeDrawingService } from './edge-drawing.service';\nimport { FcEdgeDraggingService } from './edge-dragging.service';\nimport { FcMouseOverService } from './mouseover.service';\nimport { FcRectangleSelectService } from './rectangleselect.service';\nexport declare class NgxFlowchartComponent implements OnInit, DoCheck {\n    private elementRef;\n    private differs;\n    private modelValidation;\n    edgeDrawingService: FcEdgeDrawingService;\n    private cd;\n    private zone;\n    get canvasClass(): string;\n    model: FcModel;\n    selectedObjects: any[];\n    edgeStyle: string;\n    userCallbacks: UserCallbacks;\n    automaticResize: boolean;\n    dragAnimation: string;\n    nodeWidth: number;\n    nodeHeight: number;\n    dropTargetId: string;\n    modelChanged: EventEmitter<any>;\n    private fitModelSizeByDefaultValue;\n    get fitModelSizeByDefault(): boolean;\n    set fitModelSizeByDefault(value: boolean);\n    callbacks: FcCallbacks;\n    userNodeCallbacks: UserNodeCallbacks;\n    modelService: FcModelService;\n    nodeDraggingService: FcNodeDraggingService;\n    edgeDraggingService: FcEdgeDraggingService;\n    mouseoverService: FcMouseOverService;\n    rectangleSelectService: FcRectangleSelectService;\n    arrowDefId: string;\n    arrowDefIdSelected: string;\n    flowchartConstants: {\n        htmlPrefix: string;\n        leftConnectorType: string;\n        rightConnectorType: string;\n        curvedStyle: string;\n        lineStyle: string;\n        dragAnimationRepaint: string;\n        dragAnimationShadow: string;\n        canvasClass: string;\n        selectedClass: string;\n        editClass: string;\n        activeClass: string;\n        hoverClass: string;\n        draggingClass: string;\n        edgeClass: string;\n        edgeLabelClass: string;\n        connectorClass: string;\n        magnetClass: string;\n        nodeClass: string;\n        nodeOverlayClass: string;\n        leftConnectorClass: string;\n        rightConnectorClass: string;\n        canvasResizeThreshold: number;\n        canvasResizeStep: number;\n    };\n    private nodesDiffer;\n    private edgesDiffer;\n    private readonly detectChangesSubject;\n    constructor(elementRef: ElementRef<HTMLElement>, differs: IterableDiffers, modelValidation: FcModelValidationService, edgeDrawingService: FcEdgeDrawingService, cd: ChangeDetectorRef, zone: NgZone);\n    ngOnInit(): void;\n    ngDoCheck(): void;\n    getEdgeDAttribute(edge: FcEdge): string;\n    adjustCanvasSize(fit?: boolean): void;\n    canvasClick(event: MouseEvent): void;\n    edgeMouseDown(event: MouseEvent, edge: FcEdge): void;\n    edgeClick(event: MouseEvent, edge: FcEdge): void;\n    edgeRemove(event: Event, edge: FcEdge): void;\n    edgeEdit(event: Event, edge: FcEdge): void;\n    edgeDoubleClick(event: MouseEvent, edge: FcEdge): void;\n    edgeMouseOver(event: MouseEvent, edge: FcEdge): void;\n    edgeMouseEnter(event: MouseEvent, edge: FcEdge): void;\n    edgeMouseLeave(event: MouseEvent, edge: FcEdge): void;\n    dragover(event: Event | any): void;\n    drop(event: Event | any): void;\n    mousedown(event: MouseEvent): void;\n    mousemove(event: MouseEvent): void;\n    mouseup(event: MouseEvent): void;\n}\n"]}